import java.io.*;
import java.util.StringTokenizer;

public class Main implements Runnable {

    static PrintWriter printWriter;

    class FastScanner {
        BufferedReader reader;
        StringTokenizer tokenizer;

        public FastScanner(String fileName) throws IOException {
            reader = new BufferedReader(new FileReader(fileName));
        }

        public String next() throws IOException {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String line = reader.readLine();
                if (line == null) {
                    throw new EOFException();
                }
                tokenizer = new StringTokenizer(line);
            }
            return tokenizer.nextToken();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }
    }


    class Node {
        long sum;
        int max;
        int min;
        int color;

        Node() {
        }

    }

    class Tree {
        Node[] s;

        Tree(int n) {
            s = new Node[2 * n];
            for (int i = 0; i < 2 * n; i++) {
                s[i] = new Node();
            }
        }


        long sum(int l, int r, int v, int tl, int tr, int leaveNum) {
            //1 случай
            if (l == tl && tr == r) {
                return s[v].sum;
            }
            //2 случай
            if (tr < l || tl > r) {
                return 0;
            }
            leaveNum >>= 1;
            //3 случай
            int center = (tr + tl) / 2;
            if (s[v].color != 0) {
                push(v, leaveNum);
            }
            return sum(Math.max(l, center + 1), r, v * 2 + 2, center + 1, tr, leaveNum) + sum(l, Math.min(r, center), v * 2 + 1, tl, center, leaveNum);
        }

        int max(int l, int r, int v, int tl, int tr, int leaveNum) {
            //1 случай
            if (l == tl && tr == r) {
                return s[v].max;
            }
            //2 случай
            if (tr < l || tl > r) {
                return Integer.MIN_VALUE;
            }
            //3 случай
            leaveNum >>= 1;
            int center = (tr + tl) / 2;
            if (s[v].color != 0) {
                push(v, leaveNum);
            }
            return Math.max(max(Math.max(l, center + 1), r, v * 2 + 2, center + 1, tr, leaveNum), max(l, Math.min(r, center), v * 2 + 1, tl, center, leaveNum));
        }

        int min(int l, int r, int v, int tl, int tr, int leaveNum) {
            //1 случай
            if (l == tl && tr == r) {
                return s[v].min;
            }
            //2 случай
            if (tr < l || tl > r) {
                return Integer.MAX_VALUE;
            }
            //3 случай
            int center = (tr + tl) / 2;
            leaveNum >>= 1;
            if (s[v].color != 0) {
                push(v, leaveNum);
            }
            return Math.min(min(Math.max(l, center + 1), r, v * 2 + 2, center + 1, tr, leaveNum), min(l, Math.min(r, center), v * 2 + 1, tl, center, leaveNum));
        }

        void modification(int idx, int val, int v, int tl, int tr, int leaveNum) {
            //вариант 1
            if (idx == tl && idx == tr) {
                s[v].min = val;
                s[v].max = val;
                s[v].sum = val;
                return;
            }
            //вариант 2
            if (tr < idx || idx < tl) {
                return;
            }

            //вариант 3
            int center = (tl + tr) / 2;
            leaveNum >>= 1;
            int ind1 = v * 2 + 1;
            int ind2 = v * 2 + 2;
            if (s[v].color != 0) push(v, leaveNum);
            if (idx <= center)
                modification(idx, val, ind1, tl, center, leaveNum);
            else
                modification(idx, val, ind2, center + 1, tr, leaveNum);
            s[v].sum = s[ind1].sum + s[ind2].sum;
            s[v].min = Math.min(s[ind1].min, s[ind2].min);
            s[v].max = Math.max(s[ind1].max, s[ind2].max);
        }

        void assign(int l, int r, int val, int v, int tl, int tr, int leaveNum) {
            //вариант 1
            if (l == tl && tr == r) {
                s[v].sum += val * leaveNum;
                s[v].min += val;
                s[v].max += val;
                s[v].color += val;
                return;
            }

            //вариант 2
            if (tr < l || r < tl) {
                return;
            }
            if (2 * v + 1 < s.length) {
                //вариант 3
                leaveNum >>= 1;
                int ind1 = v * 2 + 1;
                int ind2 = v * 2 + 2;
                if (s[v].color != 0) push(v, leaveNum);
                int center = (tl + tr) / 2;
                assign(l, Math.min(r, center), val, ind1, tl, center, leaveNum);
                assign(Math.max(l, center + 1), r, val, ind2, center + 1, tr, leaveNum);
                s[v].sum = s[ind1].sum + s[ind2].sum;
                s[v].min = Math.min(s[ind1].min, s[ind2].min);
                s[v].max = Math.max(s[ind1].max, s[ind2].max);
            }
        }


        void push(int v, int leaveNum) {
            if (s[v].color != 0 && v * 2 + 1 < s.length) {

                int ind1 = v * 2 + 1;
                int ind2 = v * 2 + 2;
                s[ind1].sum += leaveNum * s[v].color;
                s[ind2].sum += leaveNum * s[v].color;

                s[ind1].min += s[v].color;
                s[ind1].max += s[v].color;

                s[ind2].min += s[v].color;
                s[ind2].max += s[v].color;

                s[ind1].color += s[v].color;
                s[ind2].color += s[v].color;
                s[v].color = 0;

            }
        }

    }

    @Override
    public void run() {
        try {
            int n = 0, pow2 = 1;
            FastScanner fs = new FastScanner("input.txt");

            n = fs.nextInt();

            while (pow2 < n) pow2 <<= 1;
            Tree tree = new Tree(2 * pow2 - 1);
            printWriter = new PrintWriter("output.txt");


            while (true) {
                switch (fs.nextInt()) {
                    case 1: {
                        int index = fs.nextInt();
                        int value = fs.nextInt();
                        tree.modification(index, value, 0, 0, pow2 - 1, pow2);
                        break;
                    }
                    case 2: {
                        int from = fs.nextInt();
                        int to = fs.nextInt();
                        tree.assign(from, to, fs.nextInt(), 0, 0, pow2 - 1, pow2);
                        break;
                    }
                    case 3: {
                        int from = fs.nextInt();
                        int to = fs.nextInt();
                        printWriter.println(tree.sum(from, to, 0, 0, pow2 - 1, pow2));
                        break;
                    }
                    case 4: {
                        int from = fs.nextInt();
                        int to = fs.nextInt();
                        printWriter.println(tree.min(from, to, 0, 0, pow2 - 1, pow2));
                        break;
                    }
                    case 5: {
                        int from = fs.nextInt();
                        int to = fs.nextInt();
                        printWriter.println(tree.max(from, to, 0, 0, pow2 - 1, pow2));
                        break;
                    }
                   /* case 0: {
                        printWriter.flush();
                    }*/
                }
                printWriter.flush();
            }
        } catch (IOException ex) {

        }

    }

    public static void main(String[] args) {
        new Thread(null, new Main(), "", 64 * 1024 * 1024).start();

    }
}
