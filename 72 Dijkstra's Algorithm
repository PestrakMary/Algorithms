import java.io.*;
import java.util.*;


public class Main implements Runnable {
    class Node{
        long priority;
        int numb;
        Node(int numb, long priority){
            this.priority = priority;
            this.numb = numb;
        }
    }

    class BestCost{
        int toNode;
        int cost;
        BestCost(int to, int c){
            toNode = to;
            cost = c;
        }

    }

    int m;
    int n;
    ArrayList<BestCost>[] graph;
    long[] priority;
    boolean[] visit;

    static PrintWriter printWriter;


    @Override
    public void run() {
        try {
            FastScanner scanner = new FastScanner("input.txt");
            n = scanner.nextInt();
            m = scanner.nextInt();
            graph = new ArrayList[n];
            visit = new boolean[n];
            priority = new long[n];
            graph = new ArrayList[n];
            for(int i = 0; i<n; i++){
               priority[i] = 0L;
                graph[i] = new ArrayList<BestCost>();
            }
            for (int i = 0; i < m; i++) {
                int u = scanner.nextInt();
                int v = scanner.nextInt();
                int cost = scanner.nextInt();
                if(u!=v) {
                    graph[u-1].add(new BestCost(v, cost));
                    graph[v-1].add(new BestCost(u, cost));
                }
            }
            printWriter = new PrintWriter("output.txt");
            dijkstra();
            printWriter.print(priority[n-1]);
            printWriter.flush();
        } catch (IOException ex) {

        }

    }
    public void dijkstra(){
        PriorityQueue<Node> queue = new PriorityQueue(new Comparator<Node>() {
            @Override
            public int compare(Node o1, Node o2) {
                if(o1.priority<o2.priority) return -1;
                else if(o1.priority>o2.priority) return 1;
                return 0;
            }
        });
        queue.add(new Node(1, 0));
        Node v;
        while(!queue.isEmpty()){
            v = queue.poll();
            if(!visit[v.numb-1]){
                visit[v.numb-1] = true;
                if(v.numb-1 == 0) priority[v.numb-1] = 0;
                else priority[v.numb-1] = v.priority;
                for(int i = 0; i< graph[v.numb-1].size(); i++){
                    Node w  = new Node(graph[v.numb-1].get(i).toNode, priority[v.numb-1]+graph[v.numb-1].get(i).cost);
                    queue.add(w);
                }
            }
        }
    }


    public static void main(String[] args) {
        new Thread(null, new Main(), "", 64 * 1024 * 1024).start();

    }

    class FastScanner {
        BufferedReader reader;
        StringTokenizer tokenizer;

        public FastScanner(String fileName) throws IOException {
            reader = new BufferedReader(new FileReader(fileName));
        }

        public String next() throws IOException {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String line = reader.readLine();
                if (line == null) {
                    throw new EOFException();
                }
                tokenizer = new StringTokenizer(line);
            }
            return tokenizer.nextToken();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }
    }
}
